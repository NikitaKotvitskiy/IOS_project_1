#/usr/local/bin/bash
#Řešení 1. projektu IOS, 31.3.2022
#Autor: Nikita Kotvitskiy (xkotvi01)

function main()
{
    checkOpts $@                    #READING OPTIONS AND ARGUMENTS
    if [ "$HELP" != "" ] ; then     #-h CASE
        echo "Použití:"
        echo -e "\tcorona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
        echo "COMMAND může být jeden z:"
        echo -e "\tinfected — spočítá počet nakažených."
        echo -e "\tmerge — sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí (hlavička bude ve výstupu jen jednou)."
        echo -e "\tgender — vypíše počet nakažených pro jednotlivá pohlaví."
        echo -e "\tage — vypíše statistiku počtu nakažených osob dle věku (bližší popis je níže)."
        echo -e "\tdaily — vypíše statistiku nakažených osob pro jednotlivé dny."
        echo -e "\tmonthly — vypíše statistiku nakažených osob pro jednotlivé měsíce."
        echo -e "\tyearly — vypíše statistiku nakažených osob pro jednotlivé roky."
        echo -e "\tcountries — vypíše statistiku nakažených osob pro jednotlivé země nákazy (bez ČR, tj. kódu CZ)."
        echo -e "\tdistricts — vypíše statistiku nakažených osob pro jednotlivé okresy."
        echo -e "\tregions — vypíše statistiku nakažených osob pro jednotlivé kraje."
        echo "FILTERS může být kombinace následujících (každý maximálně jednou):"
        echo -e "\t-a DATETIME — after: jsou uvažovány pouze záznamy PO tomto datu (včetně tohoto data). DATETIME je formátu YYYY-MM-DD."
        echo -e "\t-b DATETIME — before: jsou uvažovány pouze záznamy PŘED tímto datem (včetně tohoto data)."
        echo -e "\t-g GENDER — jsou uvažovány pouze záznamy nakažených osob daného pohlaví. GENDER může být M (muži) nebo Z (ženy)."
        echo -e "\t-s [WIDTH] u příkazů gender, age, daily, monthly, yearly, countries, districts a regions vypisuje data ne číselně, ale graficky v podobě histogramů. Nepovinný parametr WIDTH nastavuje šířku histogramů, tedy délku nejdelšího řádku, na WIDTH. Tedy, WIDTH musí být kladné celé číslo. Pokud není parametr WIDTH uveden, řídí se šířky řádků požadavky uvedenými níže."
        echo -e "\t-h — vypíše nápovědu s krátkým popisem každého příkazu a přepínače."
        exit 1
    fi
    if [ "$SRCS" != "" ] ; then     #IF SOME SOURCE EXISTS, THEN STDIN WILL NOT BE USED
        USE_PIPE=false
    else                            #IF THERE ARE NOT ANY SOURCES, THEN DATA ARE EXPECTED ON STDIN
        USE_PIPE=true
    fi
    case $COMMAND in                #CALLING FUNCTION DEPENDING ON COMMAND
        "infected") sort_input $SRCS | infected;;
        "gender") sort_input $SRCS | gender;;
        "age") sort_input $SRCS | age | column -t -s' ' | sed s/'  :'/':'/g ;;
        "daily") sort_input $SRCS | daily_monthly_yearly 0 | sort;;
        "monthly") sort_input $SRCS | daily_monthly_yearly 3 | sort;;
        "yearly") sort_input $SRCS | daily_monthly_yearly 6 | sort;;
        "countries") sort_input $SRCS | countries | sort;;
        "regions") sort_input $SRCS | regions_districts 5 | sort;;
        "districts") sort_input $SRCS | regions_districts 6 | sort;;
        "merge") sort_input $SRCS;;
        *) sort_input $SRCS;;
    esac         
}
function checkOpts()
{
    OPT_CNT=$#
    while [ $OPT_CNT -ne 0 ] ; do
        case $1 in
            "-a")   if [ "$AFTER" != "" ] ; then
                        echo Invalid options >&2
                        exit 1
                    fi
                    shift; AFTER=$1; checkDate $AFTER; shift; let OPT_CNT=$OPT_CNT-2;;
            "-b")   if [ "$BEFORE" != "" ] ; then
                        echo Invalid options >&2
                        exit 1
                    fi
                    shift; BEFORE=$1; checkDate $BEFORE; shift; let OPT_CNT=$OPT_CNT-2;;
            "-g")   if [ "$GENDER" != "" ] ; then
                        echo Invalid options >&2
                        exit 1
                    fi
                    shift; GENDER=$1; checkGender $GENDER; shift; let OPT_CNT=$OPT_CNT-2;;
            "-h")   if [ "$HELP" != "" ] ; then
                        echo Invalid options >&2
                        exit 1
                    fi
                    HELP=true; shift; let OPT_CNT=$OPT_CNT-1;;
            "-s")   if [ "$SIZE" != "" ] ; then
                        echo Invalid options >&2
                        exit 1
                    fi
                    shift; SIZE=$1; 
                    if ! checkSize ; then
                        shift
                        let OPT_CNT=$OPT_CNT-2
                    else
                        let OPT_CNT=$OPT_CNT-1
                    fi;;
            *)      if [ "$COMMAND" == "" ] ; then
                        checkCommand $1
                        if [ "$COMMAND" != "null" ] ; then
                            shift
                            let OPT_CNT=$OPT_CNT-1
                        fi
                    else
                        SRCS=$*
                        checkSrcs $SRCS
                        break
                    fi;;
        esac
    done
}
function checkSrcs() #CHECKS, IF SOURCE FORMAT IS VALID
{
    case $* in
        *.gz) ;;
        *.bz2) ;;
        *.csv) ;;
        *) echo "Invalid source"; exit 1 ;;
    esac
}
function checkDate() #CHECKS, IF -d ARGUMENT IS VALID
{
    Y=${1:0:4}
    m=${1:5:2}
    d=${1:8:2}
    if ! date -d "$Y-$m-$d" &> /dev/null; then
        echo Invalid date >&2
        exit 1
    fi
}
function checkGender() #CHECKS, IF -g ARGUMENT IS VALID
{
    if [[ "$1" != "M" ]] && [[ "$1" != "Z" ]] ; then
        echo Invalid gender >&2
        exit 1
    fi
}
function checkSize() #CHECKS, IF -s ARGUMENT IS VALID
{
    if ! (echo "$SIZE" | grep -E -q "^[0-9]+$") ; then
        SIZE=true
        return 0
    else
        return 1
    fi
}
function checkCommand() #CHECKS COMMAND OPTION. IF COMAND OPTION IS NOT SET OR IS NOT VALID, OPTION = merge
{
    case "$1" in
        "infected")     COMMAND=$1;;
        "merge")        COMMAND=$1;;
        "gender")       COMMAND=$1;;
        "age")          COMMAND=$1;;
        "daily")        COMMAND=$1;;
        "monthly")      COMMAND=$1;;
        "yearly")       COMMAND=$1;;
        "countries")    COMMAND=$1;;
        "districts")    COMMAND=$1;;
        "regions")      COMMAND=$1;;
        *)              COMMAND=null
esac
}

function sortAfter() #SORTING BY -a ARGUMENT
{
    if [ "$AFTER" != "" ] ; then
        awk -F, -v d=$AFTER '
        {
            if ($2=="datum" && ENVIRON["HEAD"]==0 || $2 != "datum" && $2 > d)
            {
                print $0;
                ENVIRON["HEAD"]=1;
            }
        }'
    else
        awk -F, '
        {
            if (ENVIRON["HEAD"]==0 || $2!="datum") 
            {
                print $0;
                ENVIRON["HEAD"]=1;
            }
        }'
    fi
}
function sortBefore() #SORTING BY -b ARGUMENT
{
    if [ "$BEFORE" != "" ] ; then
        awk -F, -v d=$BEFORE '
        {if ($2<d || $2=="datum") print $0;}'
    else
        awk '{print $0}'
    fi
}
function sortGender()  #SORTING BY -g ARGUMENT
{
    if [ "$GENDER" != "" ] ; then
        awk -F, -v d=$GENDER '
        {if ($4==d || $2=="datum") print $0;}'
    else
        awk '{print $0}'
    fi 
}
function sort_invalid_data()  #CHECKS, IF ALL DATES AND AGES IN .CSV ARE VALID
{
    awk -F, '
        {
            if ($2=="datum")
                print $0;
            else
            {   
                year=substr($2,0,4);
                month=substr($2,6,2);
                day=substr($2,9,2);
                badDate=0
                if ((year % 4) == 0) maxFeb=29;
                else maxFeb=28;
                if (int(month)==2 && day>maxFeb) badDate=1;
                else if (int(month)<1 || int(month)>12) badDate=1;
                else if (int(day)<=0) badDate=1;
                else if ((int(month)==1 || int(month)==3 || int(month)==5 || int(month)==7 || int(month)==8 || int(month)==10 || int(month)==12) && day>31) badDate=1;
                else if ((int(month)==4 || int(month)==6 || int(month)==9 || int(month)==11) && day>30) badDate=1;
                if (badDate==1)
                    invalidDates[id]=$0;
                if ((int($3)<0 || $3 != int($3)) && $3 != "")
                    invalidAges[ia]=$0;
                if (badDate!=1 && (int($3)>=0 && int($3)==$3 || $3 == ""))
                    print $0
            }
        }
        END{
            for (key in invalidDates) print "Invalid date: "invalidDates[key] > "/dev/stderr";
            for (key in invalidAges) print "Invalid age: "invalidAges[key] > "/dev/stderr";
        }'
}
function sort_input() #GETS RID OF SPACES AND EMPTY LINES, THEN CHECKS DATES AND AGES, THEN SORTS BY -a, -b, -g
{
    case $* in
        *.gz) zcat $* | sed s/' '//g | awk '{if ($0>0) print $0}' | sort_invalid_data | sortAfter | sortBefore | sortGender ;;
        *.bz2) bzcat $* | sed s/' '//g | awk '{if ($0>0) print $0}' | sort_invalid_data | sortAfter | sortBefore | sortGender ;;
        "") sortAfter | sed s/' '//g | awk '{if ($0>0) print $0}' | sort_invalid_data | sortBefore | sortGender ;;
        *) cat $* | sed s/' '//g | awk '{if ($0>0) print $0}' | sort_invalid_data | sortAfter | sortBefore | sortGender ;;
    esac
}
function infected()
{
    awk -F, 'BEGIN{i=0}
            {i=i+1}
            END{print i-1}'
}
function gender()
{
    awk -F, -v s=$SIZE 'BEGIN{m=0;z=0}
            {
                if($2!="datum")
                {
                    if ($4=="M") m=m+1;
                    else z=z+1;
                }
            }
            END{
                if (s=="")
                {
                    print "M: ",m;
                    print "Z: ",z;
                }
                else
                {
                    if (s=="true")
                        divs=100000
                    else
                    {
                        max=m;
                        if (z>max) max=z;
                        divs=max/s-0.5;
                    }
                    printf "M: ";
                    for (i=divs;i<=m;i+=divs)
                        printf "#";
                    printf "\n";
                    printf "Z: ";
                    for (i=divs;i<=z;i+=divs)
                        printf "#";
                    printf "\n";
                }
            }'
}
function age()
{
    awk -F, -v s=$SIZE '
            {
                if($2!="datum")
                {
                    if ($3 != "" && $3 <= 105)
                        arr[int(($3+4)/10)]++;
                    else if ($3 != "" && $3 > 105)
                        arr[11]++;
                    else none++;;
                }
            }
            END{
                if (s=="")
                {
                    print "0-5 : "arr[0]
                    for (i=1;i<11;i++)
                        print i*10-4"-"i*10+5" : "arr[i]
                    print ">105 : "arr[11]
                    print "None : "none
                }
                else
                {
                    if (s=="true")
                        divs=10000;
                    else
                    {
                        for (key in arr)
                            if (arr[key]>max)
                                max=arr[key];
                        divs=max/s-0.5;
                    }
                    printf "0-5 : ";
                    for (i=divs;i<=arr[0];i+=divs)
                        printf "#";
                    printf "\n";
                    for (i=1;i<11;i++)
                    {
                        printf i*10-4"-"i*10+5" : ";
                        for (j=divs;j<=arr[i];j+=divs)
                            printf "#";
                        printf "\n";
                    }
                    print ">105 : ";
                    for (i=divs;i<=arr[11];i+=divs)
                        printf "#";
                    printf "\n";
                    print "None : ";
                    for (i=divs;i<=none;i+=divs)
                        printf "#";
                    printf "\n";
                }
            }'
}
function daily_monthly_yearly()
{   
    awk -F, -v d=$1 -v s=$SIZE '
                {
                    if($2!="datum")
                    {
                        str=substr($2,1,length($2)-d)
                        arr[str]=arr[str]+1;
                    }
                }
                END{
                if (s=="")
                {
                    for(key in arr)
                        print key": "arr[key];
                }
                else
                {
                    if (s=="true")
                    {
                        if (d==0) divs=500;
                        else if (d==3) divs=10000;
                        else divs=100000;
                    }
                    else
                    {
                        for (key in arr)
                        if (arr[key] > max)
                            max = arr[key];
                        divs=max/s-0.5;
                    }
                    for(key in arr)
                    {
                        printf key": ";
                        for (i=divs;i<=arr[key];i+=divs)
                            printf "#";
                        printf "\n";
                    }
                }
            }'
}
function countries()
{
    awk -F, -v s=$SIZE '
            {
                if ($2!="datum" && $8!="" && $8!="CZ")
                    arr[$8]=arr[$8]+1
            }
            END{
                if (s=="")
                {
                    for(key in arr)
                        print key": "arr[key];
                }
                else
                {
                    if (s=="true")
                        divs=100;
                    else
                    {
                        for (key in arr)
                        if (arr[key] > max)
                            max = arr[key];
                        divs=max/s-0.5;
                    }
                    for(key in arr)
                    {
                        printf key": ";
                        for (i=divs;i<=arr[key];i+=divs)
                            printf "#";
                        printf "\n";
                    }
                }
            }'
}
function regions_districts()
{
    awk -F, -v d=$1 -v s=$SIZE '
            {
                if($2!="datum")
                {
                    if ($d=="")
                        arr["None"]=arr["None"]+1;
                    else
                        arr[$d]=arr[$d]+1;
                }
            }
            END{
                if (s=="")
                {
                    for(key in arr)
                        print key": "arr[key];
                }
                else
                {
                    if (s=="true")
                    {
                        if (d==5) divs=10000;
                        else divs=1000;
                    }
                    else
                    {
                        for (key in arr)
                        if (arr[key] > max)
                            max = arr[key];
                        divs=max/s-0.5;
                    }
                    for(key in arr)
                    {
                        printf key": ";
                        for (i=divs;i<=arr[key];i+=divs)
                            printf "#";
                        printf "\n";
                    }
                }
            }'
}

unset -v AFTER BEFORE GENDER SIZE HELP COMMAND
HEAD=0
OPT_CNT=$#
SRCS_CNT=0
main $@